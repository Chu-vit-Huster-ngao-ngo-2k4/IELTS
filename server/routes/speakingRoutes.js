const express = require('express');
const router = express.Router();
const axios = require('axios');

router.post('/feedback', async (req, res) => {
  const { audio, topic } = req.body;

  if (!audio || !topic) {
    return res.status(400).json({ error: "Missing required fields: audio or topic" });
  }

  try {
    console.log("Starting audio transcription...");
    console.log("Audio data length:", audio.length);
    console.log("Topic:", topic);

    // First, convert audio to text using Whisper
    try {
      const whisperResponse = await axios.post(
        'https://api.openrouter.ai/api/v1/audio/transcriptions',
        {
          model: "openai/whisper-1",
          audio: audio
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
            'HTTP-Referer': 'http://localhost:5000',
            'X-Title': 'IELTS Speaking Assistant'
          }
        }
      );

      console.log("Transcription successful:", whisperResponse.data);
      const transcription = whisperResponse.data.text;

      if (!transcription) {
        throw new Error("No transcription received from Whisper API");
      }

      console.log("Getting AI feedback...");
      // Then, get AI feedback on the speech
      const response = await axios.post(
        'https://api.openrouter.ai/api/v1/chat/completions',
        {
          model: "openai/gpt-4.1-nano",
          messages: [
            {
              role: "system",
              content: `
B·∫°n l√† m·ªôt gi√°m kh·∫£o IELTS Speaking kh√≥ t√≠nh, ch·∫•m nghi√™m kh·∫Øc (lu√¥n ch·∫•m th·∫•p h∆°n 0.5‚Äì1.0 band so v·ªõi th·ª±c t·∫ø). Ph·∫£n h·ªìi b·∫±ng **ti·∫øng Vi·ªát**, d·ªÖ hi·ªÉu, s√∫c t√≠ch v√† c√≥ ph√¢n ƒëo·∫°n r√µ r√†ng b·∫±ng Markdown v√† emoji. D√πng ti·∫øng Anh *ch·ªâ khi l√† t·ª´ ng·ªØ chuy√™n m√¥n ho·∫∑c t·ª´ v·ª±ng IELTS*.

C·∫•u tr√∫c ph·∫£n h·ªìi nh∆∞ sau:

### üèÅ Band ƒëi·ªÉm t·ªïng quan
- Band ∆∞·ªõc t√≠nh: **6.0**
- M·ªôt d√≤ng c·∫£m nh·∫≠n chung
- Th·ªùi gian n√≥i c√≥ ph√π h·ª£p kh√¥ng? (Part 2 n√™n n√≥i 1-2 ph√∫t)

### ‚úÖ ƒêi·ªÉm m·∫°nh
- Nh·ªØng ƒëi·ªÉm l√†m t·ªët (v·ªÅ n·ªôi dung, ph√°t √¢m, t·ª´ v·ª±ng...)
- Highlight c√°c t·ª´ v·ª±ng t·ªët b·∫±ng **bold** v√† emoji üåü
- ƒê√°nh gi√° c√°ch m·ªü ƒë·∫ßu v√† k·∫øt th√∫c

### ‚ö†Ô∏è ƒêi·ªÉm c·∫ßn c·∫£i thi·ªán
1. **Fluency and Coherence** ‚Äì n√≥i tr√¥i ch·∫£y? c√≥ ng·∫≠p ng·ª´ng nhi·ªÅu kh√¥ng?
2. **Lexical Resource** ‚Äì t·ª´ v·ª±ng ƒëa d·∫°ng? c√≥ l·∫∑p t·ª´ kh√¥ng?
3. **Grammatical Range and Accuracy** ‚Äì ng·ªØ ph√°p ƒë√∫ng? c√¢u ƒëa d·∫°ng ch∆∞a?
4. **Pronunciation** ‚Äì ph√°t √¢m r√µ r√†ng? c√≥ l·ªói ph√°t √¢m n√†o kh√¥ng?

### üìà L√†m sao ƒë·ªÉ n√¢ng band l√™n 7.0+
- M·ªói ti√™u ch√≠, ƒë∆∞a 1‚Äì2 tips c·ª• th·ªÉ, ng·∫Øn g·ªçn, c√≥ th·ªÉ √°p d·ª•ng ngay
- G·ª£i √Ω c√°ch m·ªü ƒë·∫ßu v√† k·∫øt th√∫c t·ªët h∆°n
- ƒê·ªÅ xu·∫•t c√°c t·ª´ v·ª±ng n√¢ng cao c√≥ th·ªÉ thay th·∫ø

## ‚úçÔ∏è G·ª£i √Ω s·ª≠a l·ªói
D∆∞·ªõi ƒë√¢y l√† nh·ªØng l·ªói trong b√†i n√≥i. H√£y ch√∫ √Ω m·∫•y ch·ªó n√†y nh√©:

> ‚ùå **L·ªói:** [m√¥ t·∫£ l·ªói]
> üí° **G·ª£i √Ω:** [c√°ch s·ª≠a ho·∫∑c l·ªùi gi·∫£i th√≠ch ng·∫Øn]

H√£y vi·∫øt ph·∫£n h·ªìi ng·∫Øn g·ªçn, d·ªÖ nh√¨n, tr√°nh lan man. N·∫øu c√≥ th·ªÉ, h√£y d√πng emoji nh·∫π nh√†ng v√† phong c√°ch g·∫ßn g≈©i nh∆∞ Gen Z nh∆∞ng v·∫´n gi·ªØ s·ª± chuy√™n nghi·ªáp.
N·∫øu b√†i n√≥i c√≥ l·ªói n·∫∑ng, b·∫°n c√≥ th·ªÉ ch√™m nh·∫π v√†i c√¢u c·∫£m th√°n vui v·∫ª nh∆∞ "Tr·ªùi ∆°i c√¢u n√†y sai band li·ªÅn ƒë√≥ b·∫°n ∆°i üò≠" nh∆∞ng kh√¥ng ch√¢m bi·∫øm qu√° ƒë√†.

L∆∞u √Ω:
- Gi·ªØ feedback trong kho·∫£ng 500-800 t·ª´
- Highlight t·ªëi ƒëa 3-4 l·ªói c·∫ßn s·ª≠a
- T·∫≠p trung v√†o c√°c l·ªói ·∫£nh h∆∞·ªüng ƒë·∫øn band ƒëi·ªÉm
- ƒê∆∞a ra g·ª£i √Ω c·ª• th·ªÉ v√† th·ª±c t·∫ø
`.trim()
            },
            {
              role: "user",
              content: `Topic: ${topic}\n\nTranscription: ${transcription}\n\nAnalyze this IELTS Speaking Part 2 response strictly and return detailed feedback.`
            }
          ]
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
            'HTTP-Referer': 'http://localhost:5000',
            'X-Title': 'IELTS Speaking Assistant'
          }
        }
      );

      console.log("AI feedback received successfully");
      res.json(response.data);
    } catch (apiError) {
      console.error("API Error Details:", {
        status: apiError.response?.status,
        code: apiError.code,
        statusText: apiError.response?.statusText,
        data: apiError.response?.data,
        message: apiError.message
      });
    
      if (apiError.code === 'ETIMEDOUT') {
        return res.status(504).json({ error: "‚è±Ô∏è Timeout khi k·∫øt n·ªëi t·ªõi OpenRouter. Ki·ªÉm tra m·∫°ng ho·∫∑c th·ª≠ VPN nha." });
      }
    
      if (apiError.response?.status === 401) {
        return res.status(401).json({ error: "API key sai ho·∫∑c h·∫øt h·∫°n. Ki·ªÉm tra l·∫°i env ƒëi √¥ng gi√°o." });
      }
    
      if (apiError.response?.status === 429) {
        return res.status(429).json({ error: "B·∫°n g·ªçi API nhi·ªÅu qu√° r·ªìi üòµ. ƒê·ª£i t√≠ r·ªìi th·ª≠ l·∫°i nha." });
      }
    
      if (apiError.response?.status === 400) {
        return res.status(400).json({ error: "Audio g·ª≠i l√™n c√≥ th·ªÉ b·ªã l·ªói. G·ª≠i l·∫°i b·∫£n ghi kh√°c th·ª≠ nha." });
      }
    
      if (apiError.message.includes("No transcription")) {
        return res.status(400).json({ error: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c b·∫£n ch√©p l·ªùi t·ª´ Whisper. G·ª≠i l·∫°i audio th·ª≠ nha." });
      }
    
      return res.status(500).json({ 
        error: "L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω. C√≥ th·ªÉ do m·∫°ng ho·∫∑c c·∫•u h√¨nh API. Th·ª≠ l·∫°i sau nha.",
        details: process.env.NODE_ENV === 'development' ? apiError.message : undefined
      });
    }
  } catch (error) {
    console.error("‚ùå Unexpected error:", error);
    res.status(500).json({ error: "L·ªói kh√¥ng x√°c ƒë·ªãnh. Th·ª≠ l·∫°i sau nha." });
  }
});

module.exports = router; 